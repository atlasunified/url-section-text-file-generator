<!DOCTYPE html>
<html lang="en">
  <head>
    
      <title>Blocks And Event Listeners</title>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="description" content="A Step-by-Step Gradio Tutorial">
<meta name="author" content="Gradio Team">
<meta property="og:title" content="Blocks And Event Listeners">
<meta property="og:type" content="website">
<meta property="og:url" content="https://gradio.app/blocks-and-event-listeners">
<meta property="og:description" content="A Step-by-Step Gradio Tutorial">
<meta property="og:image" content="https://www.gradio.app/assets/img/meta-image.png" />
<meta name="twitter:card" content="summary_large_image">
<meta name="twitter:creator" content="@Gradio">
<meta name="twitter:title" content="Blocks And Event Listeners">
<meta name="twitter:description" content="A Step-by-Step Gradio Tutorial.">
<meta name="twitter:image" content="https://www.gradio.app/assets/img/meta-image.png">

<link rel="icon" type="image/png" href="/assets/img/logo.png">
<link rel="stylesheet" href="/style.89f71609db418e667531.css">
<link rel="stylesheet" href="/assets/prism.css">
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Source+Sans+Pro:ital,wght@0,200;0,300;0,400;0,600;0,700;0,900;1,200;1,300;1,400;1,600;1,700;1,900&display=swap" rel="stylesheet">
<link rel="canonical" href="https://gradio.app/blocks-and-event-listeners" />


<script async src="https://www.googletagmanager.com/gtag/js?id=UA-156449732-1"></script>
<script>
    window.dataLayer = window.dataLayer || [];
    function gtag() {
        dataLayer.push(arguments);
    }
    gtag('js', new Date());
    gtag('config', 'UA-156449732-1');
</script>
    
    <link rel="stylesheet" href="/style.89f71609db418e667531.css">
    <link rel="stylesheet" href="/assets/prism.css">
  </head>
  <body>
    <div
  class="container mx-auto flex flex-wrap justify-between flex-row relative items-center px-4 py-5 gap-6 text-lg z-50"
>
  <a href="/">
    <img src="/assets/gradio.svg" >
  </a>
  <svg
    class="h-8 w-8 lg:hidden"
    viewBox="-10 -10 20 20"
    onclick='document.querySelector("nav").classList.toggle("hidden"),document.querySelector("nav").classList.toggle("flex")'
  >
    <rect x="-7" y="-6" width="14" height="2"></rect>
    <rect x="-7" y="-1" width="14" height="2"></rect>
    <rect x="-7" y="4" width="14" height="2"></rect>
  </svg>
  <nav
    class="hidden w-full flex-col gap-3 lg:flex lg:w-auto lg:flex-row lg:gap-8"
  >
    <a class="thin-link flex items-center gap-3" href="/quickstart"
      ><span>â¡</span> <span>Quickstart</span>
    </a>
    <a class="thin-link flex items-center gap-3" href="/docs"
      ><span>âï¸</span> <span>Docs</span>
    </a>
    <a class="thin-link flex items-center gap-3" href="/guides"
      ><span>ð¡</span> <span>Guides</span></a
    >
    <a class="thin-link flex items-center gap-3" href="/demos"
      ><span>ð¢</span> <span>Demos</span></a
    >
    <div
      class="group relative flex cursor-pointer items-center gap-3"
      onclick='document.querySelector(".help-menu").classList.toggle("flex"),document.querySelector(".help-menu").classList.toggle("hidden")'
    >
      <span>ð</span> <span>Community</span>
      <svg
        class="h-4 w-4"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 20 20"
      >
        <path
          d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z"
        ></path>
      </svg>
      <div
        class="help-menu absolute top-6 hidden w-52 flex-col bg-white shadow group-hover:flex sm:right-0"
      >
        <a
          class="thin-link inline-block px-4 py-2 hover:bg-gray-100"
          href="https://github.com/gradio-app/gradio/issues/new/choose"
          target="_blank"
          >File an Issue</a
        >
        <a
          class="thin-link inline-block px-4 py-2 hover:bg-gray-100"
          href="https://discuss.huggingface.co/c/gradio/26"
          target="_blank"
          >Discuss</a
        >
        <a
          class="thin-link inline-block px-4 py-2 hover:bg-gray-100"
          target="_blank"
          href="https://discord.gg/feTf9x3ZSB"
          >Discord</a
        >
        <a
          class="thin-link inline-block px-4 py-2 hover:bg-gray-100"
          target="_blank"
          href="https://gradio.curated.co/"
          >Newsletter</a
        >
      </div>
    </div>
    <a class="thin-link flex items-center gap-3" href="https://github.com/gradio-app/gradio"
      >
    <img src="/assets/img/github-black.svg" class="w-6">
    </a>
  </nav>
</div>
    <div class="container mx-auto px-4 flex gap-4 relative">
      <div class="side-navigation h-screen leading-relaxed sticky top-0 text-md overflow-y-auto overflow-x-hidden hidden lg:block rounded-t-xl bg-gradient-to-r from-white to-gray-50"
           style="min-width: 18%">
        
          
          <div class="category-link  mb-2  font-semibold px-4 pt-2 text-ellipsis block"
             style="max-width: 12rem">
            Getting Started 
            
          </div>
          
            <a class="guide-link   -indent-2 ml-2 thin-link px-4 block overflow-hidden"
               style="max-width: 12rem"
               href="/quickstart/">Quickstart</a>
            
          
            <a class="guide-link   -indent-2 ml-2 thin-link px-4 block overflow-hidden"
               style="max-width: 12rem"
               href="/key-features/">Key Features</a>
            
          
            <a class="guide-link   -indent-2 ml-2 thin-link px-4 block overflow-hidden"
               style="max-width: 12rem"
               href="/sharing-your-app/">Sharing Your App</a>
            
          
        
          
          <div class="category-link  my-2  font-semibold px-4 pt-2 text-ellipsis block"
             style="max-width: 12rem">
            Building Interfaces 
            
          </div>
          
            <a class="guide-link   -indent-2 ml-2 thin-link px-4 block overflow-hidden"
               style="max-width: 12rem"
               href="/interface-state/">Interface State</a>
            
          
            <a class="guide-link   -indent-2 ml-2 thin-link px-4 block overflow-hidden"
               style="max-width: 12rem"
               href="/reactive-interfaces/">Reactive Interfaces</a>
            
          
            <a class="guide-link   -indent-2 ml-2 thin-link px-4 block overflow-hidden"
               style="max-width: 12rem"
               href="/more-on-examples/">More On Examples</a>
            
          
            <a class="guide-link   -indent-2 ml-2 thin-link px-4 block overflow-hidden"
               style="max-width: 12rem"
               href="/advanced-interface-features/">Advanced Interface Features</a>
            
          
            <a class="guide-link   -indent-2 ml-2 thin-link px-4 block overflow-hidden"
               style="max-width: 12rem"
               href="/four-kinds-of-interfaces/">Four Kinds Of Interfaces</a>
            
          
        
          
          <div class="category-link  my-2  font-semibold px-4 pt-2 text-ellipsis block"
             style="max-width: 12rem">
            Building With Blocks 
            
          </div>
          
            <a class="guide-link  current-nav-link pb-1  -indent-2 ml-2 thin-link px-4 block overflow-hidden"
               style="max-width: 12rem"
               href="/blocks-and-event-listeners/">Blocks And Event Listeners</a>
            
              <div class="navigation max-w-full bg-gradient-to-r from-orange-50 to-orange-100 p-2 mx-2 border-l-2 border-orange-500 mb-2">
              </div>
            
          
            <a class="guide-link   -indent-2 ml-2 thin-link px-4 block overflow-hidden"
               style="max-width: 12rem"
               href="/controlling-layout/">Controlling Layout</a>
            
          
            <a class="guide-link   -indent-2 ml-2 thin-link px-4 block overflow-hidden"
               style="max-width: 12rem"
               href="/state-in-blocks/">State In Blocks</a>
            
          
            <a class="guide-link   -indent-2 ml-2 thin-link px-4 block overflow-hidden"
               style="max-width: 12rem"
               href="/custom-CSS-and-JS/">Custom CSS And JS</a>
            
          
            <a class="guide-link   -indent-2 ml-2 thin-link px-4 block overflow-hidden"
               style="max-width: 12rem"
               href="/using-blocks-like-functions/">Using Blocks Like Functions</a>
            
          
        
          
          <div class="category-link  my-2  font-semibold px-4 pt-2 text-ellipsis block"
             style="max-width: 12rem">
            Integrating Other Frameworks 
            
          </div>
          
            <a class="guide-link   -indent-2 ml-2 thin-link px-4 block overflow-hidden"
               style="max-width: 12rem"
               href="/using-hugging-face-integrations/">Using Hugging Face Integrations</a>
            
          
            <a class="guide-link   -indent-2 ml-2 thin-link px-4 block overflow-hidden"
               style="max-width: 12rem"
               href="/Gradio-and-Comet/">Gradio And Comet</a>
            
          
            <a class="guide-link   -indent-2 ml-2 thin-link px-4 block overflow-hidden"
               style="max-width: 12rem"
               href="/Gradio-and-ONNX-on-Hugging-Face/">Gradio And ONNX On Hugging Face</a>
            
          
            <a class="guide-link   -indent-2 ml-2 thin-link px-4 block overflow-hidden"
               style="max-width: 12rem"
               href="/Gradio-and-Wandb-Integration/">Gradio And Wandb Integration</a>
            
          
            <a class="guide-link   -indent-2 ml-2 thin-link px-4 block overflow-hidden"
               style="max-width: 12rem"
               href="/image-classification-in-pytorch/">Image Classification In Pytorch</a>
            
          
            <a class="guide-link   -indent-2 ml-2 thin-link px-4 block overflow-hidden"
               style="max-width: 12rem"
               href="/image-classification-in-tensorflow/">Image Classification In Tensorflow</a>
            
          
            <a class="guide-link   -indent-2 ml-2 thin-link px-4 block overflow-hidden"
               style="max-width: 12rem"
               href="/image-classification-with-vision-transformers/">Image Classification With Vision Transformers</a>
            
          
        
          
          <div class="category-link  my-2  font-semibold px-4 pt-2 text-ellipsis block"
             style="max-width: 12rem">
            Tabular Data Science And Plots 
            
          </div>
          
            <a class="guide-link   -indent-2 ml-2 thin-link px-4 block overflow-hidden"
               style="max-width: 12rem"
               href="/connecting-to-a-database/">Connecting To A Database</a>
            
          
            <a class="guide-link   -indent-2 ml-2 thin-link px-4 block overflow-hidden"
               style="max-width: 12rem"
               href="/creating-a-dashboard-from-bigquery-data/">Creating A Dashboard From Bigquery Data</a>
            
          
            <a class="guide-link   -indent-2 ml-2 thin-link px-4 block overflow-hidden"
               style="max-width: 12rem"
               href="/creating-a-dashboard-from-supabase-data/">Creating A Dashboard From Supabase Data</a>
            
          
            <a class="guide-link   -indent-2 ml-2 thin-link px-4 block overflow-hidden"
               style="max-width: 12rem"
               href="/creating-a-realtime-dashboard-from-google-sheets/">Creating A Realtime Dashboard From Google Sheets</a>
            
          
            <a class="guide-link   -indent-2 ml-2 thin-link px-4 block overflow-hidden"
               style="max-width: 12rem"
               href="/plot-component-for-maps/">Plot Component For Maps</a>
            
          
            <a class="guide-link   -indent-2 ml-2 thin-link px-4 block overflow-hidden"
               style="max-width: 12rem"
               href="/using-gradio-for-tabular-workflows/">Using Gradio For Tabular Workflows</a>
            
          
        
          
          <div class="category-link  my-2  font-semibold px-4 pt-2 text-ellipsis block"
             style="max-width: 12rem">
            Client Libraries 
            
          </div>
          
            <a class="guide-link   -indent-2 ml-2 thin-link px-4 block overflow-hidden"
               style="max-width: 12rem"
               href="/getting-started-with-the-python-client/">Getting Started With The Python Client</a>
            
          
        
          
          <div class="category-link  my-2  font-semibold px-4 pt-2 text-ellipsis block"
             style="max-width: 12rem">
            Other Tutorials 
            
            <button class="block show-guides" onclick="show_all_guides()"> [ show ] </button>
            
          </div>
          
            <a class="guide-link   hidden  -indent-2 ml-2 thin-link px-4 block overflow-hidden"
               style="max-width: 12rem"
               href="/building-a-pictionary-app/">Building A Pictionary App</a>
            
          
            <a class="guide-link   hidden  -indent-2 ml-2 thin-link px-4 block overflow-hidden"
               style="max-width: 12rem"
               href="/create-your-own-friends-with-a-gan/">Create Your Own Friends With A Gan</a>
            
          
            <a class="guide-link   hidden  -indent-2 ml-2 thin-link px-4 block overflow-hidden"
               style="max-width: 12rem"
               href="/creating-a-chatbot/">Creating A Chatbot</a>
            
          
            <a class="guide-link   hidden  -indent-2 ml-2 thin-link px-4 block overflow-hidden"
               style="max-width: 12rem"
               href="/creating-a-new-component/">Creating A New Component</a>
            
          
            <a class="guide-link   hidden  -indent-2 ml-2 thin-link px-4 block overflow-hidden"
               style="max-width: 12rem"
               href="/custom-interpretations-with-blocks/">Custom Interpretations With Blocks</a>
            
          
            <a class="guide-link   hidden  -indent-2 ml-2 thin-link px-4 block overflow-hidden"
               style="max-width: 12rem"
               href="/developing-faster-with-reload-mode/">Developing Faster With Reload Mode</a>
            
          
            <a class="guide-link   hidden  -indent-2 ml-2 thin-link px-4 block overflow-hidden"
               style="max-width: 12rem"
               href="/gradio-and-llm-agents/">Gradio And Llm Agents</a>
            
          
            <a class="guide-link   hidden  -indent-2 ml-2 thin-link px-4 block overflow-hidden"
               style="max-width: 12rem"
               href="/how-to-use-3D-model-component/">How To Use 3D Model Component</a>
            
          
            <a class="guide-link   hidden  -indent-2 ml-2 thin-link px-4 block overflow-hidden"
               style="max-width: 12rem"
               href="/named-entity-recognition/">Named Entity Recognition</a>
            
          
            <a class="guide-link   hidden  -indent-2 ml-2 thin-link px-4 block overflow-hidden"
               style="max-width: 12rem"
               href="/real-time-speech-recognition/">Real Time Speech Recognition</a>
            
          
            <a class="guide-link   hidden  -indent-2 ml-2 thin-link px-4 block overflow-hidden"
               style="max-width: 12rem"
               href="/running-background-tasks/">Running Background Tasks</a>
            
          
            <a class="guide-link   hidden  -indent-2 ml-2 thin-link px-4 block overflow-hidden"
               style="max-width: 12rem"
               href="/setting-up-a-demo-for-maximum-performance/">Setting Up A Demo For Maximum Performance</a>
            
          
            <a class="guide-link   hidden  -indent-2 ml-2 thin-link px-4 block overflow-hidden"
               style="max-width: 12rem"
               href="/theming-guide/">Theming Guide</a>
            
          
            <a class="guide-link   hidden  -indent-2 ml-2 thin-link px-4 block overflow-hidden"
               style="max-width: 12rem"
               href="/using-flagging/">Using Flagging</a>
            
          
        
      </div>
      <div class="w-full">
        
        <div class="prose text-lg max-w-full"><h1 id="blocks-and-event-listeners">Blocks and Event Listeners</h1>

<p>We took a quick look at Blocks in the <a rel="noopener" target="_blank" href="https://gradio.app/quickstart/#blocks-more-flexibility-and-control">Quickstart</a>. Let's dive deeper. This guide will cover the how Blocks are structured, event listeners and their types, running events continuously, updating configurations, and using dictionaries vs lists. </p>

<h2 id="blocks-structure">Blocks Structure</h2>

<p>Take a look at the demo below.</p>

<div class='codeblock'><pre><code class='lang-python'>import gradio as gr

def greet(name):
    return "Hello " + name + "!"

with gr.Blocks() as demo:
    name = gr.Textbox(label="Name")
    output = gr.Textbox(label="Output Box")
    greet_btn = gr.Button("Greet")
    greet_btn.click(fn=greet, inputs=name, outputs=output, api_name="greet")


demo.launch()</code></pre></div>

<p><gradio-app space='gradio/hello_blocks' /></p>

<ul>
<li>First, note the <code>with gr.Blocks() as demo:</code> clause. The Blocks app code will be contained within this clause.</li>
<li>Next come the Components. These are the same Components used in <code>Interface</code>. However, instead of being passed to some constructor, Components are automatically added to the Blocks as they are created within the <code>with</code> clause.</li>
<li>Finally, the <code>click()</code> event listener. Event listeners define the data flow within the app. In the example above, the listener ties the two Textboxes together. The Textbox <code>name</code> acts as the input and Textbox <code>output</code> acts as the output to the <code>greet</code> method. This dataflow is triggered when the Button <code>greet_btn</code> is clicked. Like an Interface, an event listener can take multiple inputs or outputs.</li>
</ul>

<h2 id="event-listeners-and-interactivity">Event Listeners and Interactivity</h2>

<p>In the example above, you'll notice that you are able to edit Textbox <code>name</code>, but not Textbox <code>output</code>. This is because any Component that acts as an input to an event listener is made interactive. However, since Textbox <code>output</code> acts only as an output, it is not interactive. You can directly configure the interactivity of a Component with the <code>interactive=</code> keyword argument. </p>

<div class='codeblock'><pre><code class='lang-python'>output = gr.Textbox(label="Output", interactive=True)
</code></pre></div>

<h2 id="types-of-event-listeners">Types of Event Listeners</h2>

<p>Take a look at the demo below:</p>

<div class='codeblock'><pre><code class='lang-python'>import gradio as gr

def welcome(name):
    return f"Welcome to Gradio, {name}!"

with gr.Blocks() as demo:
    gr.Markdown(
    """
    # Hello World!
    Start typing below to see the output.
    """)
    inp = gr.Textbox(placeholder="What is your name?")
    out = gr.Textbox()
    inp.change(welcome, inp, out)

demo.launch()</code></pre></div>

<p><gradio-app space='gradio/blocks_hello' /></p>

<p>Instead of being triggered by a click, the <code>welcome</code> function is triggered by typing in the Textbox <code>inp</code>. This is due to the <code>change()</code> event listener. Different Components support different event listeners. For example, the <code>Video</code> Component supports a <code>play()</code> event listener, triggered when a user presses play. See the <a rel="noopener" target="_blank" href="http://gradio.app/docs#components">Docs</a> for the event listeners for each Component.</p>

<h2 id="multiple-data-flows">Multiple Data Flows</h2>

<p>A Blocks app is not limited to a single data flow the way Interfaces are. Take a look at the demo below:</p>

<div class='codeblock'><pre><code class='lang-python'>import gradio as gr

def increase(num):
    return num + 1

with gr.Blocks() as demo:
    a = gr.Number(label="a")
    b = gr.Number(label="b")
    btoa = gr.Button("a > b")
    atob = gr.Button("b > a")
    atob.click(increase, a, b)
    btoa.click(increase, b, a)

demo.launch()</code></pre></div>

<p><gradio-app space='gradio/reversible_flow' /></p>

<p>Note that <code>num1</code> can act as input to <code>num2</code>, and also vice-versa! As your apps get more complex, you will have many data flows connecting various Components. </p>

<p>Here's an example of a "multi-step" demo, where the output of one model (a speech-to-text model) gets fed into the next model (a sentiment classifier).</p>

<div class='codeblock'><pre><code class='lang-python'>from transformers import pipeline

import gradio as gr

asr = pipeline("automatic-speech-recognition", "facebook/wav2vec2-base-960h")
classifier = pipeline("text-classification")


def speech_to_text(speech):
    text = asr(speech)["text"]
    return text


def text_to_sentiment(text):
    return classifier(text)[0]["label"]


demo = gr.Blocks()

with demo:
    audio_file = gr.Audio(type="filepath")
    text = gr.Textbox()
    label = gr.Label()

    b1 = gr.Button("Recognize Speech")
    b2 = gr.Button("Classify Sentiment")

    b1.click(speech_to_text, inputs=audio_file, outputs=text)
    b2.click(text_to_sentiment, inputs=text, outputs=label)

demo.launch()
</code></pre></div>

<p><gradio-app space='gradio/blocks_speech_text_sentiment' /></p>

<h2 id="function-input-list-vs-dict">Function Input List vs Dict</h2>

<p>The event listeners you've seen so far have a single input component. If you'd like to have multiple input components pass data to the function, you have two options on how the function can accept input component values:</p>

<ol>
<li>as a list of arguments, or</li>
<li>as a single dictionary of values, keyed by the component</li>
</ol>

<p>Let's see an example of each:</p>

<div class='codeblock'><pre><code class='lang-python'>import gradio as gr

with gr.Blocks() as demo:
    a = gr.Number(label="a")
    b = gr.Number(label="b")
    with gr.Row():
        add_btn = gr.Button("Add")
        sub_btn = gr.Button("Subtract")
    c = gr.Number(label="sum")

    def add(num1, num2):
        return num1 + num2
    add_btn.click(add, inputs=[a, b], outputs=c)

    def sub(data):
        return data[a] - data[b]
    sub_btn.click(sub, inputs={a, b}, outputs=c)


demo.launch()</code></pre></div>

<p>Both <code>add()</code> and <code>sub()</code> take <code>a</code> and <code>b</code> as inputs. However, the syntax is different between these listeners. </p>

<ol>
<li>To the <code>add_btn</code> listener, we pass the inputs as a list. The function <code>add()</code> takes each of these inputs as arguments. The value of <code>a</code> maps to the argument <code>num1</code>, and the value of <code>b</code> maps to the argument <code>num2</code>.</li>
<li>To the <code>sub_btn</code> listener, we pass the inputs as a set (note the curly brackets!). The function <code>sub()</code> takes a single dictionary argument <code>data</code>, where the keys are the input components, and the values are the values of those components.</li>
</ol>

<p>It is a matter of preference which syntax you prefer! For functions with many input components, option 2 may be easier to manage.</p>

<p><gradio-app space='gradio/calculator_list_and_dict' /></p>

<h2 id="function-return-list-vs-dict">Function Return List vs Dict</h2>

<p>Similarly, you may return values for multiple output components either as:</p>

<ol>
<li>a list of values, or</li>
<li>a dictionary keyed by the component</li>
</ol>

<p>Let's first see an example of (1), where we set the values of two output components by returning two values:</p>

<div class='codeblock'><pre><code class='lang-python'>with gr.Blocks() as demo:
    food_box = gr.Number(value=10, label="Food Count")
    status_box = gr.Textbox()
    def eat(food):
        if food > 0:
            return food - 1, "full"
        else:
            return 0, "hungry"
    gr.Button("EAT").click(
        fn=eat, 
        inputs=food_box,
        outputs=[food_box, status_box]
    )
</code></pre></div>

<p>Above, each return statement returns two values corresponding to <code>food_box</code> and <code>status_box</code>, respectively.</p>

<p>Instead of returning a list of values corresponding to each output component in order, you can also return a dictionary, with the key corresponding to the output component and the value as the new value. This also allows you to skip updating some output components. </p>

<div class='codeblock'><pre><code class='lang-python'>with gr.Blocks() as demo:
    food_box = gr.Number(value=10, label="Food Count")
    status_box = gr.Textbox()
    def eat(food):
        if food > 0:
            return {food_box: food - 1, status_box: "full"}
        else:
            return {status_box: "hungry"}
    gr.Button("EAT").click(
        fn=eat, 
        inputs=food_box,
        outputs=[food_box, status_box]
    )
</code></pre></div>

<p>Notice how when there is no food, we only update the <code>status_box</code> element. We skipped updating the <code>food_box</code> component.</p>

<p>Dictionary returns are helpful when an event listener affects many components on return, or conditionally affects outputs and not others.</p>

<p>Keep in mind that with dictionary returns, we still need to specify the possible outputs in the event listener.</p>

<h2 id="updating-component-configurations">Updating Component Configurations</h2>

<p>The return value of an event listener function is usually the updated value of the corresponding output Component. Sometimes we want to update the configuration of the Component as well, such as the visibility. In this case, we return a <code>gr.update()</code> object instead of just the update Component value.</p>

<div class='codeblock'><pre><code class='lang-python'>import gradio as gr

def change_textbox(choice):
    if choice == "short":
        return gr.update(lines=2, visible=True, value="Short story: ")
    elif choice == "long":
        return gr.update(lines=8, visible=True, value="Long story...")
    else:
        return gr.update(visible=False)

with gr.Blocks() as demo:
    radio = gr.Radio(
        ["short", "long", "none"], label="Essay Length to Write?"
    )
    text = gr.Textbox(lines=2, interactive=True)
    radio.change(fn=change_textbox, inputs=radio, outputs=text)

demo.launch()</code></pre></div>

<p><gradio-app space='gradio/blocks_essay_update' /></p>

<p>See how we can configure the Textbox itself through the <code>gr.update()</code> method. The <code>value=</code> argument can still be used to update the value along with Component configuration.</p>

<h2 id="running-events-consecutively">Running Events Consecutively</h2>

<p>You can also run events consecutively by using the <code>then</code> method of an event listener. This will run an event after the previous event has finished running. This is useful for running events that update components in multiple steps. </p>

<p>For example, in the chatbot example below, we first update the chatbot with the user message immediately, and then update the chatbot with the computer response after a simulated delay.</p>

<div class='codeblock'><pre><code class='lang-python'>import gradio as gr
import random
import time

with gr.Blocks() as demo:
    chatbot = gr.Chatbot()
    msg = gr.Textbox()
    clear = gr.Button("Clear")

    def respond(message, chat_history):
        bot_message = random.choice(["How are you?", "I love you", "I'm very hungry"])
        chat_history.append((message, bot_message))
        time.sleep(1)
        return "", chat_history

    msg.submit(respond, [msg, chatbot], [msg, chatbot])
    clear.click(lambda: None, None, chatbot, queue=False)

demo.launch()
</code></pre></div>

<p><gradio-app space='gradio/chatbot_simple' /></p>

<p>The <code>.then()</code> method of an event listener executes the subsequent event regardless of whether the previous event raised any errors. If you'd like to  only run subsequent events if the previous event executed successfully, use the <code>.success()</code> method, which takes the same arguments as <code>.then()</code>.</p>

<h2 id="running-events-continuously">Running Events Continuously</h2>

<p>You can run events on a fixed schedule using the <code>every</code> parameter of the event listener. This will run the event
<code>every</code> number of seconds while the client connection is open. If the connection is closed, the event will stop running after the following iteration.
Note that this does not take into account the runtime of the event itself. So a function
with a 1 second runtime running with <code>every=5</code>, would actually run every 6 seconds.</p>

<p>Here is an example of a sine curve that updates every second!</p>

<div class='codeblock'><pre><code class='lang-python'>import math
import gradio as gr
import plotly.express as px
import numpy as np


plot_end = 2 * math.pi


def get_plot(period=1):
    global plot_end
    x = np.arange(plot_end - 2 * math.pi, plot_end, 0.02)
    y = np.sin(2*math.pi*period * x)
    fig = px.line(x=x, y=y)
    plot_end += 2 * math.pi
    if plot_end > 1000:
        plot_end = 2 * math.pi
    return fig


with gr.Blocks() as demo:
    with gr.Row():
        with gr.Column():
            gr.Markdown("Change the value of the slider to automatically update the plot")
            period = gr.Slider(label="Period of plot", value=1, minimum=0, maximum=10, step=1)
            plot = gr.Plot(label="Plot (updates every half second)")

    dep = demo.load(get_plot, None, plot, every=1)
    period.change(get_plot, period, plot, every=1, cancels=[dep])


if __name__ == "__main__":
    demo.queue().launch()
</code></pre></div>

<p><gradio-app space='gradio/sine_curve' /></p>

<h2 id="gathering-event-data">Gathering Event Data</h2>

<p>You can gather specific data about an event by adding the associated event data class as a type hint to an argument in the event listener function. </p>

<p>For example, event data for <code>.select()</code> can be type hinted by a <code>gradio.SelectData</code> argument. This event is triggered when a user selects some part of the triggering component, and the event data includes information about what the user specifically selected. If a user selected a specific word in a <code>Textbox</code>, a specific image in a <code>Gallery</code>, or a specific cell in a <code>DataFrame</code>, the event data argument would contain information about the specific selection.</p>

<p>In the 2 player tic-tac-toe demo below, a user can select a cell in the <code>DataFrame</code> to make a move. The event data argument contains information about the specific cell that was selected. We can first check to see if the cell is empty, and then update the cell with the user's move. </p>

<div class='codeblock'><pre><code class='lang-python'>import gradio as gr

with gr.Blocks() as demo:
    turn = gr.Textbox("X", interactive=False, label="Turn")
    board = gr.Dataframe(value=[["", "", ""]] * 3, interactive=False, type="array")

    def place(board, turn, evt: gr.SelectData):
        if evt.value:
            return board, turn
        board[evt.index[0]][evt.index[1]] = turn
        turn = "O" if turn == "X" else "X"
        return board, turn

    board.select(place, [board, turn], [board, turn])

demo.launch()</code></pre></div>

<p><gradio-app space='gradio/tictactoe' /></p></div>
        <div class="flex justify-between mt-4">
          
            <a href="/four-kinds-of-interfaces/"
               class="text-left p-4 bg-gray-50 hover:underline">
              <div class="text-gray-600 block">&lt; Previous</div>
              <div class="text-lg font-semibold">Four Kinds Of Interfaces</div>
            </a>
          
          
            <a href="/controlling-layout/"
               class="text-right p-4 bg-gray-50 hover:underline">
              <div class="text-gray-600 block">Next &gt;</div>
              <div class="text-lg font-semibold">Controlling Layout</div>
            </a>
          
        </div>
      </div>
    </div>
    <script src="/assets/prism.js"></script>
    <script>window.__gradio_mode__ = "website";</script>
    <footer class="container mx-auto flex-row flex items-center px-4 py-6 justify-between">
  <a href="/">
    <svg width="90"
         viewBox="0 0 451 105"
         fill="none"
         xmlns="http://www.w3.org/2000/svg">
      <path d="M45.7779 9.7789L91.2031 34.6919V49.2071L45.7779 24.2941V9.7789Z" fill="#FF7C00" fill-opacity="0.75" />
      <path d="M91.1878 34.6924L45.5957 59.6992V74.3078L91.1878 49.301V34.6924Z" fill="#FF7C00" />
      <path d="M-0.000525172 34.6924L45.5957 59.6992V74.3079L-0.000525172 49.3011V34.6924Z" fill="#FF7C00"
      fill-opacity="0.75" />
      <path d="M45.7731 9.68544L0.00585938 34.6919V49.3006L45.7731 24.2942V9.68544Z" fill="#FF7C00" />
      <path d="M45.7779 34.9728L91.2031 59.8857V74.4009L45.7779 49.488V34.9728Z" fill="#FF7C00" fill-opacity="0.75" />
      <path d="M91.1878 59.8853L45.5957 84.8921V99.5007L91.1878 74.4939V59.8853Z" fill="#FF7C00" />
      <path d="M-0.000525172 59.8853L45.5957 84.8921V99.5008L-0.000525172 74.494V59.8853Z" fill="#FF7C00"
      fill-opacity="0.75" />
      <path d="M45.7731 34.8783L0.00585938 59.8848V74.4935L45.7731 49.4871V34.8783Z" fill="#FF7C00" />
      <path
      d="M139.727 96.9891L148.148 86.596C152.803 90.8598 157.991 92.9917 163.711 92.9917C167.549 92.9917 170.711 92.4232 173.198 91.2862C175.686 90.1492 176.929 88.5858 176.929 86.596C176.929 83.2205 174.176 81.5327 168.668 81.5327C167.176 81.5327 164.955 81.7104 162.006 82.0657C159.057 82.421 156.836 82.5987 155.344 82.5987C146.176 82.5987 141.593 79.312 141.593 72.7386C141.593 70.8554 142.357 69.0077 143.885 67.1956C145.413 65.3835 147.189 64.0511 149.214 63.1983C142.712 58.97 139.461 52.9829 139.461 45.237C139.461 39.1255 141.699 34.08 146.176 30.1004C150.653 26.0853 156.161 24.0777 162.699 24.0777C167.815 24.0777 172.097 25.0371 175.544 26.9558L180.767 20.8799L189.987 29.2476L183.645 33.8845C185.848 37.2245 186.949 41.1686 186.949 45.7166C186.949 52.219 184.959 57.4244 180.98 61.3329C177.036 65.2058 172.044 67.1423 166.003 67.1423C165.044 67.1423 163.765 67.0535 162.166 66.8758L159.981 66.5561C159.732 66.5561 158.772 66.9469 157.102 67.7286C155.468 68.4748 154.651 69.2565 154.651 70.0737C154.651 71.495 155.877 72.2056 158.328 72.2056C159.43 72.2056 161.277 71.9391 163.871 71.4062C166.465 70.8732 168.686 70.6067 170.534 70.6067C183.503 70.6067 189.987 75.8121 189.987 86.2229C189.987 91.9791 187.393 96.4916 182.206 99.7606C177.018 103.065 170.764 104.717 163.445 104.717C154.704 104.717 146.798 102.141 139.727 96.9891ZM153.052 45.2903C153.052 48.6658 153.976 51.384 155.823 53.4448C157.707 55.4701 160.229 56.4828 163.392 56.4828C166.554 56.4828 168.988 55.4879 170.693 53.4981C172.399 51.5083 173.252 48.7724 173.252 45.2903C173.252 42.4122 172.328 39.9782 170.48 37.9885C168.668 35.9987 166.305 35.0038 163.392 35.0038C160.336 35.0038 157.849 35.9631 155.93 37.8819C154.011 39.8006 153.052 42.27 153.052 45.2903Z"
      fill="#FF7C00" />
      <path
      d="M231.773 37.6687C229.392 36.1053 226.78 35.3236 223.938 35.3236C220.847 35.3236 218.093 36.7271 215.677 39.5341C213.296 42.3411 212.106 45.7699 212.106 49.8206V82.3322H198.781V25.2503H212.106V30.4735C215.837 26.2807 220.793 24.1843 226.976 24.1843C231.524 24.1843 235.006 24.8772 237.422 26.263L231.773 37.6687Z"
      fill="#FF7C00" />
      <path
      d="M277.236 76.6293C276.028 78.6191 273.913 80.2536 270.893 81.5327C267.909 82.7763 264.782 83.3981 261.513 83.3981C255.366 83.3981 250.533 81.8703 247.016 78.8145C243.498 75.7233 241.739 71.3529 241.739 65.7033C241.739 59.0944 244.209 53.9245 249.148 50.1936C254.122 46.4628 261.175 44.5974 270.307 44.5974C271.87 44.5974 273.718 44.8639 275.85 45.3968C275.85 38.6813 271.604 35.3236 263.112 35.3236C258.102 35.3236 253.909 36.1586 250.533 37.8286L247.655 27.4888C252.239 25.2858 257.693 24.1843 264.018 24.1843C272.723 24.1843 279.101 26.1741 283.152 30.1537C287.202 34.0977 289.228 41.5949 289.228 52.6453V64.8505C289.228 72.4543 290.756 77.2334 293.811 79.1876C292.71 81.1063 291.484 82.2789 290.134 82.7053C288.783 83.1672 287.238 83.3981 285.497 83.3981C283.578 83.3981 281.855 82.6875 280.327 81.2662C278.799 79.845 277.769 78.2993 277.236 76.6293ZM275.956 55.4701C273.682 55.0082 271.977 54.7773 270.84 54.7773C260.322 54.7773 255.064 58.2238 255.064 65.117C255.064 70.2336 258.031 72.7919 263.965 72.7919C271.959 72.7919 275.956 68.7946 275.956 60.7999V55.4701Z"
      fill="#FF7C00" />
      <path
      d="M340.393 82.3322V78.8678C339.292 80.0759 337.427 81.1419 334.797 82.0657C332.168 82.954 329.45 83.3981 326.643 83.3981C318.684 83.3981 312.412 80.8754 307.829 75.8299C303.28 70.7843 301.006 63.749 301.006 54.724C301.006 45.6989 303.618 38.3615 308.841 32.712C314.1 27.0269 320.673 24.1843 328.561 24.1843C332.896 24.1843 336.84 25.0726 340.393 26.8492V3.98449L353.718 0.786621V82.3322H340.393ZM340.393 38.8945C337.551 36.6205 334.584 35.4835 331.493 35.4835C326.163 35.4835 322.059 37.1179 319.181 40.3869C316.303 43.6203 314.864 48.2749 314.864 54.3509C314.864 66.2185 320.584 72.1523 332.026 72.1523C333.305 72.1523 334.868 71.7792 336.716 71.0331C338.599 70.2514 339.825 69.4697 340.393 68.688V38.8945Z"
      fill="#FF7C00" />
      <path
      d="M377.542 3.13172C379.674 3.13172 381.486 3.89566 382.978 5.42353C384.506 6.91586 385.27 8.72799 385.27 10.8599C385.27 12.9918 384.506 14.8217 382.978 16.3496C381.486 17.8419 379.674 18.5881 377.542 18.5881C375.41 18.5881 373.58 17.8419 372.052 16.3496C370.56 14.8217 369.814 12.9918 369.814 10.8599C369.814 8.72799 370.56 6.91586 372.052 5.42353C373.58 3.89566 375.41 3.13172 377.542 3.13172ZM370.667 82.3322V36.1763H363.365V25.2503H384.151V82.3322H370.667Z"
      fill="#FF7C00" />
      <path
      d="M395.983 53.658C395.983 44.9527 398.488 37.8641 403.498 32.3922C408.544 26.9203 415.188 24.1843 423.431 24.1843C432.101 24.1843 438.834 26.8137 443.631 32.0724C448.428 37.3311 450.826 44.5263 450.826 53.658C450.826 62.7541 448.375 69.9849 443.471 75.3502C438.603 80.7155 431.924 83.3981 423.431 83.3981C414.762 83.3981 408.011 80.6977 403.178 75.2969C398.381 69.8605 395.983 62.6476 395.983 53.658ZM409.84 53.658C409.84 66.2363 414.371 72.5254 423.431 72.5254C427.589 72.5254 430.875 70.8909 433.291 67.622C435.743 64.3531 436.969 59.6984 436.969 53.658C436.969 41.2574 432.456 35.0571 423.431 35.0571C419.274 35.0571 415.97 36.6915 413.518 39.9605C411.066 43.2294 409.84 47.7952 409.84 53.658Z"
      fill="#FF7C00" />
    </svg>
  </a>
  <div class="flex gap-3">
    <a href="https://status.gradio.app" target="_blank" class="text-gray-400 hover:text-gray-500">
      <span>Status</span>
    </a>
    <a class="hover:opacity-75 transition" href="https://twitter.com/Gradio">
      <img src="/assets/img/twitter.svg" class="w-6">
    </a>
    <a class="hover:opacity-75 transition"
       href="https://github.com/gradio-app/gradio">
      <img src="/assets/img/github.svg" class="w-6">
    </a>
  </div>
</footer>
    <script>
      let sidebar = document.querySelector(".side-navigation")
      let target_link = document.querySelector(".current-nav-link");
      if (target_link.previousElementSibling.classList.contains("category-link")) {
        target_link = target_link.previousElementSibling;
      }
      sidebar.scrollTop = target_link.offsetTop
      document.querySelectorAll(".prose h2").forEach(subheader => {
        document.querySelector(".navigation").innerHTML += `
          <a class='subheading block thin-link -indent-2 ml-4 mr-2' href='#${subheader.id}'>${subheader.innerText}</a>
        `
      })

      const COLORS = ["bg-green-50", "bg-yellow-50", "bg-red-50", "bg-pink-50", "bg-purple-50"];
      document.querySelectorAll(".space-link").forEach(guide => {
        const color = COLORS[Math.floor(Math.random() * COLORS.length)]
        guide.classList.add(color);
      })

      const show_all_guides = () => {
        document.querySelectorAll(".guide-link").forEach(g => g.classList.remove("hidden"));
        document.querySelector(".show-guides").remove();
      }
    </script>
    <script>let mainNavLinks = document.querySelectorAll(".navigation a");
window.addEventListener("scroll", event => {
    let fromTop = window.scrollY;
    let lowest_link = null;
    mainNavLinks.forEach(link => {
        let section = document.querySelector(link.hash);
        if (section.offsetTop <= fromTop * 1.01) {
            lowest_link = link;
        }
        link.classList.remove("current-nav-link");
    });
    lowest_link.classList.add("current-nav-link");
});</script>
    <script>// adds anchor button when hovering over headers, except on touch devices where instead the header becomes a link

function createAnchorTag(link) {
        let a = document.createElement('a');
        a.href = link;
        a.classList.add("invisible", "group-hover-visible");
        let img = document.createElement('img');
        img.classList.add("anchor-img")
        img.src = "/assets/img/anchor.svg";
        a.appendChild(img);
        return a;
    }
function createMobileAnchorTag(link) {
        let a = document.createElement('a');
        a.href = link;
        a.classList.add("no-underline")
        return a;
    }

var headers = document.querySelectorAll("h2, h3");

function isTouchDevice() {
        return (('ontouchstart' in window) ||
           (navigator.maxTouchPoints > 0) ||
           (navigator.msMaxTouchPoints > 0));
      }

if (isTouchDevice()) {
      for (let i = 0; i < headers.length; i++) {
            let link = '#' + headers[i].id;
            var wrapper = createMobileAnchorTag(link);
            headers[i].replaceWith(wrapper);
            wrapper.appendChild(headers[i]);
      }
} else {
      for (let i = 0; i < headers.length; i++) {
        headers[i].classList.add("group")
        let link = '#' + headers[i].id;
        var anchorTag = createAnchorTag(link);
        headers[i].appendChild(createAnchorTag(link));
      }
}</script>
    <script>// add copy buttons to all codeblocks

const svgCopy =
'<svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true"><path fill-rule="evenodd" d="M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z"></path><path fill-rule="evenodd" d="M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.25 0 00-.25-.25h-7.5z"></path></svg>';
const svgCheck =
'<svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true"><path fill-rule="evenodd" fill="rgb(255, 124, 1)" d="M13.78 4.22a.75.75 0 010 1.06l-7.25 7.25a.75.75 0 01-1.06 0L2.22 9.28a.75.75 0 011.06-1.06L6 10.94l6.72-6.72a.75.75 0 011.06 0z"></path></svg>';


const addCopyButtons = (clipboard) => {
  document.querySelectorAll("pre > code").forEach((codeBlock) => {
  const button = document.createElement("button");
  button.classList.add("clipboard-button");
  button.type = "button";
  button.innerHTML = svgCopy;
  button.addEventListener("click", () => {
    clipboard.writeText(codeBlock.innerText).then(
      () => {
        button.blur();
        button.innerHTML = svgCheck;
        setTimeout(() => (button.innerHTML = svgCopy), 2000);
      },
      (error) => (button.innerHTML = "Error")
    );
  });
  const pre = codeBlock.parentNode;
  pre.parentNode.insertBefore(button, pre);
});
};

if (navigator && navigator.clipboard) {
addCopyButtons(navigator.clipboard);
};</script>
    <script>function load_gradio(FILE_URL) {
    console.log(FILE_URL);
    var len = Array.from(document.querySelectorAll('script')).filter(e => e.getAttribute('src') == FILE_URL).length;
    if (len === 0) {
      let scriptEle = document.createElement("script");
      scriptEle.setAttribute("src", FILE_URL);
      scriptEle.setAttribute("type", "module");
      document.body.appendChild(scriptEle);
    }
  }

  

  load_gradio("https://gradio.s3-us-west-2.amazonaws.com/3.27.0/gradio.js");</script>
  </body>
</html>